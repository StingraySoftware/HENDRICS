#!/usr/bin/env python
from __future__ import division, print_function
from maltpynt.mp_fspec import mp_calc_fspec
import argparse

description = ('Creates frequency spectra (PDS, CPDS, cospectrum) '
               'starting from well-defined input ligthcurves')
parser = argparse.ArgumentParser(description=description)

parser.add_argument("files", help="List of light curve files", nargs='+')
parser.add_argument("-b", "--bintime", type=float, default=1/4096,
                    help="Light curve bin time; if negative, interpreted" +
                    " as negative power of 2." +
                    " Default: 2^-10, or keep input lc bin time" +
                    " (whatever is larger)")
parser.add_argument("-r", "--rebin", type=int, default=1,
                    help="(C)PDS rebinning to apply. Default: none")
parser.add_argument("-f", "--fftlen", type=float, default=512,
                    help="Length of FFTs. Default: 512 s")
parser.add_argument("-k", "--kind", type=str, default="PDS,CPDS,cos",
                    help='Spectra to calculate, as comma-separated list' +
                    ' (Accepted: PDS and CPDS;' +
                    ' Default: "PDS,CPDS")')
parser.add_argument("--norm", type=str, default="Leahy",
                    help='Normalization to use' +
                    ' (Accepted: Leahy and rms;' +
                    ' Default: "Leahy")')
parser.add_argument("-o", "--outroot", type=str, default="cpds",
                    help='Root of output file names for CPDS only')

args = parser.parse_args()

bintime = args.bintime
fftlen = args.fftlen
pdsrebin = args.rebin
normalization = args.norm

do_cpds = do_pds = do_cos = do_lag = False
kinds = args.kind.split(',')
for k in kinds:
    if k == 'PDS':
        do_pds = True
    elif k == 'CPDS':
        do_cpds = True
    elif k == 'cos' or k == 'cospectrum':
        do_cos = True
        do_cpds = True
    elif k == 'lag':
        do_lag = True
        do_cpds = True

mp_calc_fspec(args.files, fftlen,
              calc_pds=do_pds,
              calc_cpds=do_cpds,
              calc_cospectrum=do_cos,
              calc_lags=do_lag,
              save_dyn=False,
              bintime=bintime,
              pdsrebin=pdsrebin,
              outroot=args.outroot,
              normalization=normalization)
